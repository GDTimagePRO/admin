package com.instamp.workstation.ui.components;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.LinkedList;

import com.instamp.vaadin.components.GenericDatabaseView;
import com.instamp.workstation.data.GenesysDB;
import com.instamp.workstation.data.GenesysDB.DesignDetails;
import com.vaadin.data.Container.Filter;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.data.util.ObjectProperty;
import com.vaadin.data.util.filter.Compare;
import com.vaadin.data.util.filter.SimpleStringFilter;
import com.vaadin.data.util.sqlcontainer.connection.JDBCConnectionPool;
import com.vaadin.shared.ui.MarginInfo;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class DesignListView extends CustomComponent
{
	public static final class KeyValuePair
	{
		private int _key;
		public int getKey() { return _key; }
		public void setKey(int key) { _key = key; }

		private String _value;
		public String getValue() { return _value; }
		public void setValue(String value) { _value = value; }
		
		public KeyValuePair() { }

		public KeyValuePair(int key, String value)
		{
			_key = key;
			_value = value;
		}
		
		@Override
		public String toString() { return _value.toString(); }
	}
	
	private static final long serialVersionUID = -4455833109305837658L;

	
	private final VerticalLayout _rootLayout = new VerticalLayout();
	private final GenericDatabaseView _databaseView;
	private final JDBCConnectionPool _connectionPool;


	public int[] getSelectedDesignIds()
	{
		Object[][] selection = _databaseView.getSelected(); 
		int[] result = new int[selection.length];
		for(int i=0; i<selection.length; i++)
		{
			result[i] = (Integer)selection[i][0];
		}
		return result;
	}
	
	public void clearSelectedDesigns() {
		_databaseView.clearSelected();
	}
	
	
	public Collection<DesignDetails> getSelectedDesigns()
	{
		int[] selectedDesignIds = getSelectedDesignIds();
		
		if(selectedDesignIds.length == 0) return new ArrayList<DesignDetails>();
		Collection<DesignDetails> designs = null;
		try (GenesysDB db = new GenesysDB(GenesysDB.getConnectionPool())) {
			designs = db.getDesignDetailsByDesignId(selectedDesignIds, _databaseView.getTable().getSortContainerPropertyId() != null ?_databaseView.getTable().getSortContainerPropertyId().toString() : null, _databaseView.getTable().isSortAscending());
		}
		catch(Exception e) { throw new RuntimeException(e); }
		return designs;
	}
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public DesignListView(JDBCConnectionPool connectionPool, String whereSQL) throws SQLException
	{
		_connectionPool = connectionPool;
		whereSQL = "dsn.value = d.state AND  oipsn.value = oi.processing_stages_id AND d.order_item_id = oi.id AND d.product_id = p.id AND p.category_id = pc.id " + 
				(whereSQL != null ? " AND " + whereSQL : "");

		_databaseView = new GenericDatabaseView(
				connectionPool, 
				new String[]
				{
					"d.id AS 'd_id'",
					"d.state AS 'd_state'",
					"d.date_rendered AS 'd_date_rendered'",
					
					"dsn.name AS 'dsn_name'",
					
					"oi.id AS 'oi_id'",		
					"oi.customer_id AS 'oi_customer_id'",
					"oi.processing_stages_id AS 'oi_processing_stages_id'",
					"oi.date_created AS 'oi_date_created'",
					"oi.external_order_id AS 'oi_external_order_id'",
					"oi.external_system_name AS 'oi_external_system_name'",

					"oipsn.name AS 'oipsn_name'",
					
					"p.category_id AS 'p_category_id'",
					"pc.name AS 'pc_name'",
				},
				null,
				new String[] { "d_id" }, 
				"designs d, products p, order_items oi, products_category pc, designs_state_names dsn, order_items_processing_stage_names oipsn",
				whereSQL
			);
		
		Table table = _databaseView.getTable(); 
 		
		table.setVisibleColumns(
				GenericDatabaseView.COLUMN_ID_SELECTED,
				"c_description",			
				"oi_external_order_id",				
				"oi_id",
				"d_id",				
				"oipsn_name",
				"dsn_name",
				"oi_date_created",
				"oi_external_system_name",
				"d_date_rendered",				
				"pc_name",
				GenericDatabaseView.COLUMN_ID_VIEWIMAGE,
				GenericDatabaseView.COLUMN_ID_VIEWSVG
			);
		
		table.setColumnCollapsingAllowed(true);

		
		table.setColumnHeader(GenericDatabaseView.COLUMN_ID_SELECTED, "");
		table.setColumnWidth(GenericDatabaseView.COLUMN_ID_SELECTED, 20);

		
		table.setColumnHeader("c_description","Customer");
		table.setColumnWidth("c_description", 80);

		//table.setColumnHeader("oi_external_system_name","SOURCE");
		//table.setColumnWidth("oi_external_system_name", 80);
		//TODO: Change formatting for numbers to match old workstation XXXX-XXX
		table.setColumnHeader("oi_external_order_id","WEBSITE ORDER ID");
		table.setColumnWidth("oi_external_order_id", 130);
		

		table.setColumnHeader("oi_id","GENESYS ID");	
		table.setColumnWidth("oi_id", 60);
		
		table.setColumnHeader("oi_external_system_name","External System Name");	
		table.setColumnWidth("oi_external_system_name", 140);
		
		table.setColumnHeader("d_id","Design ID");
		table.setColumnWidth("d_id", 60);

		table.setColumnHeader("oipsn_name","ORDER STATE");
		table.setColumnWidth("oipsn_name", 80);

		table.setColumnHeader("dsn_name","DESIGN STATE");
		table.setColumnWidth("dsn_name", 80);

		table.setColumnHeader("oi_date_created","DATE DESIGNED");
		table.setColumnWidth("oi_date_created", 160);

		table.setColumnHeader("d_date_rendered","DATE RENDERED");
		table.setColumnWidth("d_date_rendered", 160);

		table.setColumnHeader("pc_name","TYPE");
		table.setColumnHeader(GenericDatabaseView.COLUMN_ID_VIEWIMAGE,"Image");
		table.setColumnHeader(GenericDatabaseView.COLUMN_ID_VIEWSVG,"SVG");
		
		
		
		final GridLayout filterLayout = new GridLayout(13, 3);
		filterLayout.setMargin(new MarginInfo(true, true, true, true));
		filterLayout.setSpacing(true);
		
		_rootLayout.setSizeFull();
		_rootLayout.addComponent(filterLayout);
		_rootLayout.addComponent(_databaseView);
		_rootLayout.setExpandRatio(_databaseView, 1F);
		_databaseView.setSizeFull();

		BeanItemContainer<KeyValuePair> designStates = new BeanItemContainer<>(KeyValuePair.class);
		//designStates.addBean(new KeyValuePair(GenesysDB.DESIGN_STATE_PENDING_SCL_DATA, "N/A"));
		//designStates.addBean(new KeyValuePair(GenesysDB.DESIGN_STATE_PENDING_CONFIRMATION, "EDITING"));
		designStates.addBean(new KeyValuePair(GenesysDB.DESIGN_STATE_PENDING_SCL_RENDERING, "IN QUEUE"));
		designStates.addBean(new KeyValuePair(GenesysDB.DESIGN_STATE_READY, "RENDERED"));		
		designStates.addBean(new KeyValuePair(GenesysDB.DESIGN_STATE_ARCHIVED, "ARCHIVED"));		
		
		BeanItemContainer<KeyValuePair> orderItemProcessingStages = new BeanItemContainer<>(KeyValuePair.class);
		//designStates.addBean(new KeyValuePair(GenesysDB.PROCESSING_STAGE_PENDING_CANCELED, "CANCELED"));
		//designStates.addBean(new KeyValuePair(GenesysDB.PROCESSING_STAGE_PENDING_CONFIRMATION, "EDITING"));
		orderItemProcessingStages.addBean(new KeyValuePair(GenesysDB.PROCESSING_STAGE_PENDING_CART_ORDER, "IN CART"));
		orderItemProcessingStages.addBean(new KeyValuePair(GenesysDB.PROCESSING_STAGE_PENDING_RENDERING, "IN QUEUE"));
		orderItemProcessingStages.addBean(new KeyValuePair(GenesysDB.PROCESSING_STAGE_READY, "READY"));
		orderItemProcessingStages.addBean(new KeyValuePair(GenesysDB.PROCESSING_STAGE_PRINTED, "PRINTED"));
		orderItemProcessingStages.addBean(new KeyValuePair(GenesysDB.PROCESSING_STAGE_SHIPPED, "SHIPPED"));
		orderItemProcessingStages.addBean(new KeyValuePair(GenesysDB.PROCESSING_STAGE_ARCHIVED, "ARCHIVED"));
				
		BeanItemContainer<KeyValuePair> productCategories;
		BeanItemContainer<KeyValuePair> customerIds;
		GenesysDB gdb = null;
		try
		{
			gdb = new GenesysDB(_connectionPool);
			customerIds = gdb.getCustomers();
			productCategories = gdb.getProductTypes();
		}
		catch(Exception e) { throw new RuntimeException(e); }
		finally { 
			if (gdb != null) {
				gdb.close(); 
			}
		}
		
		final ObjectProperty<String> propSource = new ObjectProperty<>(null, String.class);
		
		final ObjectProperty<Integer> propOrderItemIdLBound = new ObjectProperty<>(null, Integer.class);
		final ObjectProperty<Integer> propOrderItemIdUBound = new ObjectProperty<>(null, Integer.class);

		final ObjectProperty<Integer> propDesignIdLBound = new ObjectProperty<>(null, Integer.class);
		final ObjectProperty<Integer> propDesignIdUBound = new ObjectProperty<>(null, Integer.class);
		
		final ObjectProperty<Long> propSourceIdLBound = new ObjectProperty<>(null, Long.class);
		final ObjectProperty<Long> propSourceIdUBound = new ObjectProperty<>(null, Long.class);

		final ObjectProperty<Date> propDateRenderedLBound = new ObjectProperty<>(null, Date.class);
		final ObjectProperty<Date> propDateRenderedUBound = new ObjectProperty<>(null, Date.class);

		final ObjectProperty<Date> propDateCreatedLBound = new ObjectProperty<>(null, Date.class);
		final ObjectProperty<Date> propDateCreatedUBound = new ObjectProperty<>(null, Date.class);

		final ComboBox propDesignState = new ComboBox(null, designStates);
		
		final ObjectProperty<String> extSystName = new ObjectProperty<>(null, String.class);

		final ComboBox propOrderItemProcessingStage = new ComboBox(null, orderItemProcessingStages);
		
		final ComboBox propOrderItemProductCategory = new ComboBox(null, productCategories);
		
		final ComboBox propCustomerId = new ComboBox(null, customerIds);

		int row = 0;
		int col = 0;

		row = 0;
		filterLayout.addComponent(new Label("Order State : "), col, row);
		filterLayout.addComponent(propOrderItemProcessingStage, col + 1, row);
		 
		row++;
		filterLayout.addComponent(new Label("Design State : "), col, row);
		filterLayout.addComponent(propDesignState, col + 1, row);

		row++;
		filterLayout.addComponent(new Label("Type : "), col, row);
		filterLayout.addComponent(propOrderItemProductCategory, col + 1, row);

		row=0;
		col+=3;
		filterLayout.addComponent(new Label("Website Order Id : "), col, row);
		TextField tmptxt = new TextField(propSourceIdLBound);
		tmptxt.setNullRepresentation("");
		
		filterLayout.addComponent(tmptxt, col + 1, row);
		tmptxt = new TextField(propSourceIdUBound);
		tmptxt.setNullRepresentation("");
		filterLayout.addComponent(tmptxt, col + 2, row);

		row++;
		filterLayout.addComponent(new Label("Genesys Id"), col, row);
		tmptxt = new TextField(propOrderItemIdLBound);
		tmptxt.setNullRepresentation("");
		filterLayout.addComponent(tmptxt, col + 1, row);
		tmptxt = new TextField(propOrderItemIdUBound);
		tmptxt.setNullRepresentation("");
		
		filterLayout.addComponent(tmptxt, col + 2, row);
		
		row++;
		filterLayout.addComponent(new Label("Design Id : "), col, row);
		tmptxt = new TextField(propDesignIdLBound);
		tmptxt.setNullRepresentation("");
		filterLayout.addComponent(tmptxt, col + 1, row);
		tmptxt = new TextField(propDesignIdUBound);
		tmptxt.setNullRepresentation("");
		
		filterLayout.addComponent(tmptxt, col + 2, row);
		
		row = 0;
		col += 3;
		//filterLayout.addComponent(new Label("Source : "), col, row);
		//filterLayout.addComponent(new TextField(propSource), col + 1, row);
		
		//row++;
		filterLayout.addComponent(new Label("Customer ID: "), col, row);
		filterLayout.addComponent(propCustomerId, col+1, row);
		
		row++;
		filterLayout.addComponent(new Label("External System Name : "), col, row);
		tmptxt = new TextField(extSystName);
		tmptxt.setNullRepresentation("");
		filterLayout.addComponent(tmptxt, col + 1, row);
		
		
		
		row=0;
		col +=2;
		
		filterLayout.addComponent(new Label("Date Designed : "), col, row);
		filterLayout.addComponent(new DateField(propDateCreatedLBound), col + 1, row);
		filterLayout.addComponent(new DateField(propDateCreatedUBound), col + 2, row);

		row++;
		filterLayout.addComponent(new Label("Date Rendered : "), col, row);
		filterLayout.addComponent(new DateField(propDateRenderedLBound), col + 1, row);
		filterLayout.addComponent(new DateField(propDateRenderedUBound), col + 2, row);
		
		
		
		row = 0;
		col += 3;

		filterLayout.addComponent(new Button("Filter", new ClickListener() {

			private static final long serialVersionUID = -7144071611191266271L;

			public void buttonClick(ClickEvent event)
			{
				LinkedList<Filter> filters = new LinkedList<>(); 				

				//if(propSource.getValue() != null) filters.add(new Like("oi_external_system_name", "%" + propSource.getValue() + "%", false));
				
				if(propSourceIdLBound.getValue() != null && propSourceIdUBound.getValue() != null) {
					filters.add(new Compare.GreaterOrEqual("oi_external_order_id", propSourceIdLBound.getValue()));
					filters.add(new Compare.LessOrEqual("oi_external_order_id", propSourceIdUBound.getValue()));
				} else if (propSourceIdLBound.getValue() != null) {
					filters.add(new Compare.Equal("oi_external_order_id",  propSourceIdLBound.getValue()));
				}
				
				if(propDesignIdLBound.getValue() != null &&  propDesignIdUBound.getValue() != null) {
					 filters.add(new Compare.GreaterOrEqual("d_id", propDesignIdLBound.getValue()));
					 filters.add(new Compare.LessOrEqual("d_id", propDesignIdUBound.getValue()));
				} else if (propDesignIdLBound.getValue() != null) {
					filters.add(new Compare.Equal("d_id", propDesignIdLBound.getValue()));
				}
				
				if(propOrderItemIdLBound.getValue() != null &&  propOrderItemIdUBound.getValue() != null) {
					filters.add(new Compare.GreaterOrEqual("oi_id", propOrderItemIdLBound.getValue()));
					filters.add(new Compare.LessOrEqual("oi_id", propOrderItemIdUBound.getValue()));
				} else if (propOrderItemIdLBound.getValue() != null) {
					filters.add(new Compare.Equal("oi_id", propOrderItemIdLBound.getValue()));
				}
				
				if(propDateRenderedLBound.getValue() != null && propDateRenderedUBound.getValue() != null) {
					filters.add(new Compare.GreaterOrEqual("d_date_rendered", propDateRenderedLBound.getValue()));
					GregorianCalendar c = new GregorianCalendar();
					c.setTime(propDateRenderedUBound.getValue());
					c.add(c.DATE, 1);
					// The less than or equal function wasn't being inclusive properly for dates. Upped the day passed in by 1 to make inclusive
					filters.add(new Compare.LessOrEqual("d_date_rendered", c.getTime()));
				} else if (propDateRenderedLBound.getValue() != null) {
					filters.add(new Compare.Equal("d_date_rendered", propDateRenderedLBound.getValue()));
				}
				
				if(propDateCreatedLBound.getValue() != null && propDateCreatedUBound.getValue() != null) {
					filters.add(new Compare.GreaterOrEqual("oi_date_created", propDateCreatedLBound.getValue()));
					GregorianCalendar c = new GregorianCalendar();
					c.setTime(propDateCreatedUBound.getValue());
					c.add(c.DATE, 1);
					// The less than or equal function wasn't being inclusive properly for dates. Upped the day passed in by 1 to make inclusive
					filters.add(new Compare.LessOrEqual("oi_date_created", c.getTime())); 
				} else if (propDateCreatedLBound.getValue() != null) {
					filters.add(new Compare.Equal("oi_date_created", propDateCreatedLBound.getValue()));
				}

				if(propOrderItemProcessingStage.getValue() != null) filters.add(new Compare.Equal("oi_processing_stages_id", 
						((KeyValuePair)propOrderItemProcessingStage.getValue()).getKey()
					));
				
				if(propCustomerId.getValue() != null) filters.add(new Compare.Equal("oi_customer_id", 
						((KeyValuePair)propCustomerId.getValue()).getKey()
					));
				
				if(propDesignState.getValue() != null) filters.add(new Compare.Equal("d_state", 
						((KeyValuePair)propDesignState.getValue()).getKey()
					));

				if(extSystName.getValue() != null) filters.add(new SimpleStringFilter("oi_external_system_name", 
						extSystName.getValue(), true, false
					));
				
				if(propOrderItemProductCategory.getValue() != null) filters.add(new Compare.Equal("p_category_id", 
						((KeyValuePair)propOrderItemProductCategory.getValue()).getKey()
					));

				_databaseView.setFilters(filters);
				//_databaseView.clearSelected();
			}
		}),col,row);
		
		row++;
		filterLayout.addComponent(new Button("Select All", new ClickListener() {

			private static final long serialVersionUID = 5093586053970490754L;

			public void buttonClick(ClickEvent event)
			{
				_databaseView.selectAll();
			}
			
		}),col,row);

		row++;
		filterLayout.addComponent(new Button("Clear Selected", new ClickListener() {

			private static final long serialVersionUID = -7002020653432236574L;

			public void buttonClick(ClickEvent event)
			{
				_databaseView.clearSelected();
			}
			
		}),col,row);
		

		row = 0;
		col++;

		filterLayout.addComponent(new Button("Process Selected", new ClickListener() {

			private static final long serialVersionUID = -6360733101591488884L;

			public void buttonClick(ClickEvent event)
			{
				Collection<DesignDetails> selectedDesigns = getSelectedDesigns(); 
				if(selectedDesigns.isEmpty())
				{
					Notification.show("No designs have been selected !!");
					return;
				}
				
				new DesignProcessorDialog().show(selectedDesigns);
				clearSelectedDesigns();
			}
			
		}),col,row);

		
		//checkBox.setImmediate(true);
		LinkedList<Filter> filters = new LinkedList<>();
		filters.add(new Compare.Equal("oi_processing_stages_id", 
				GenesysDB.PROCESSING_STAGE_READY
			));
		KeyValuePair item=null;
		@SuppressWarnings("unchecked")
		Iterator<KeyValuePair> i = (Iterator<KeyValuePair>) propOrderItemProcessingStage.getItemIds().iterator();
		while(i.hasNext()) {
			KeyValuePair titem = i.next();
			if (titem._key == GenesysDB.PROCESSING_STAGE_READY) {
				item = titem;
			}
		}
		propOrderItemProcessingStage.setValue(item);
		
		_databaseView.setFilters(filters);

		setCompositionRoot(_rootLayout);		
	}
}
